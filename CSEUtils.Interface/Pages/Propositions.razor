@using CSEUtils.Proposition.Module.Logic;
@using CSEUtils.Proposition.Module.Logic.Extensions;
@using CSEUtils.Interface.Logic;
@using CSEUtils.Proposition.Module.Utils;
@using CSEUtils.Interface.Dialogs;
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@page "/proposition"
@page "/"

<PageTitle>Propositions</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium">
<MudCard style="margin-top: 10px;">
    <MudCardContent>
        <div class="d-flex align-center justify-content-between">
            <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                @foreach(var entry in PropositionHandler.OperatorsInfo) {
                    <MudTooltip Text="@(entry.Item2.ToUpper())">
                            <MudButton OnClick="() => AppendOperator((entry.Item1))">@(entry.Item1)</MudButton>
                    </MudTooltip>
                }
            </MudButtonGroup>

            <div class="d-flex align-center justify-content-end">
                <MudButton OnClick="() => Simplify()" StartIcon="@Icons.Material.Outlined.Compress">Simplify</MudButton>
                <MudTooltip Text="Export proposition to verilog">
                    <MudButton OnClick="() => Export()" StartIcon="@Icons.Material.Outlined.FileDownload">Export</MudButton>
                </MudTooltip>

                <MudMenu Icon="@Icons.Material.Rounded.MoreVert" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Variant="Variant.Text" DisableElevation="true">
                    <div class="d-flex align-center">
                        <MudButton OnClick="() => OpenAdvancedSimplifyDialogAsync()" StartIcon="@Icons.Material.Outlined.Compress">Advanced Simplify</MudButton>
                    </div>
                </MudMenu>
            </div>
        </div>

            <MudTextField 
                @ref="@PropositionTextField" 
                @bind-Value="Proposition" 
                Label="Proposition"
                Variant="Variant.Text"
                Clearable="true"
                Error="@Error"
                Validation="@(new Func<string, IEnumerable<string>>(Validate))" />
        </MudCardContent>
    </MudCard>

    @if(HasProposition) 
    {
        <MudSimpleTable style="margin-top: 5px;">
            <thead>
                @foreach(var variable in Variables)
                {
                    <th>@variable</th>
                }
                <th>@PropositionResult</th>
            </thead>
            <tbody>
                @foreach(var row in Results) 
                {
                    <tr>
                        @foreach(var variable in Variables) 
                        {
                            <td>@GetVariableValue(row, variable)</td>
                        }
                        <td>@GetDisplay(row.Item2)</td>
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
    }
</MudContainer>

@code {
    public MudTextField<string> PropositionTextField = new();

    public bool UseBinary { get; set; } = true;

    private string _proposition { get; set; } = string.Empty;
    private string _errorMessage { get; set; }= string.Empty;

    public string Proposition { get => _proposition; set => OnChanged(value); }
    public bool Error => !string.IsNullOrEmpty(_errorMessage);

    public string PropositionResult { get; set; } = string.Empty;
    public bool HasProposition { get; set; }
    public List<(Dictionary<string, bool>, bool)> Results { get; set; } = new();
    public List<string> Variables { get; set; } = new();

    private IEnumerable<string> Validate(string ch) {
        string result = _errorMessage = string.Empty;
        try {
            var prop = PropositionReader.Read(ch);
            if(prop == null || !prop.IsComplete) 
                result = _errorMessage = "Invalid proposition";

        }catch(Exception ex) {
            result = _errorMessage = ex.Message;
        }

        yield return result;
    }

    private void OnChanged(string newValue) {
        _proposition = newValue;

        // Parse :D
        try {
            var prop = PropositionReader.Read(newValue);
            if(prop == null || !prop.IsComplete) 
            {
                HasProposition = false;
                return;
            }

            // Update table
            Variables = prop.GetVariables();
            Variables.Reverse();
            Results = prop.GetTruthTable();
            
            PropositionResult = prop.ToString() ?? "Results";
            HasProposition = true;
        }catch 
        {
            HasProposition = false;
        }
    }

    private string GetVariableValue((Dictionary<string, bool>, bool) Result, string variable) {
        return Result.Item1.TryGetValue(variable, out var input) ? GetDisplay(input) : "x";
    }

    private string GetDisplay(bool value) => UseBinary ? (value ? "1" : "0") : (value ? "T" : "F");

    private void AppendOperator(char primaryOperator) {
        _proposition += primaryOperator;
        PropositionTextField.FocusAsync();
    }

    public void Export()
    {
        var proposition = PropositionReader.Read(Proposition);
        if(proposition == null) 
        {
            _errorMessage = "Invalid proposition";
            return;
        }

        var content = new ExportVerilog().Export(proposition);
        var fileName = "proposition verilog export.v";
        DownloadHelper.DownloadFileFromContent(JSRuntime, content, fileName);
    }

    public void Simplify()
    {
        var proposition = PropositionReader.Read(Proposition);
        if(proposition == null) 
        {
            _errorMessage = "Invalid proposition";
            return;
        }
        Proposition = proposition.Simplify();
    }

    public void SimplifyAdvanced(string[] constraints)
    {
        var proposition = PropositionReader.Read(Proposition);
        if(proposition == null) 
        {
            _errorMessage = "Invalid proposition";
            return;
        }
        var constraintsList = constraints
            .Select(x => PropositionReader.Read(x))
            .Where(x => x != null)
            .Select(x => x!)
            .ToList();
        Proposition = proposition.Simplify(constraintsList);
        PropositionTextField.SetText(Proposition);
    }

    private Task OpenAdvancedSimplifyDialogAsync()
    {
        var parameters = new DialogParameters()
        {
            { "OnSubmit", new Action<string[]>(x => base.InvokeAsync(() => SimplifyAdvanced(x))) }
        };
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true };
        return DialogService.ShowAsync<AdvancedSimplifyDialog>("Simple Dialog", parameters, options);
    }
}
